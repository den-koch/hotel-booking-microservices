services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-container
    ports:
      - ${API_GATEWAY_PORT}:8080
    environment:
      - SERVER_PORT=8080
    restart: always
    networks:
      - microservices-network

  booking-service:
    build:
      context: ./booking-service
      dockerfile: Dockerfile
    container_name: booking-service-container
    restart: always
    ports:
      - ${BOOKING_SERVICE_PORT}:8081
    #    env_file:
    #      - .env.docker
    environment:
      - SERVER_PORT=8081
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresdb:${POSTGRES_PORT}/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}
    depends_on:
      postgresdb:
        condition: service_healthy
    networks:
      - microservices-network

  postgresdb:
    image: postgres:13.0-alpine
    container_name: booking_postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    restart: always
    volumes:
      - postgres:/data
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'" ]
      interval: 10s
      timeout: 3s
      retries: 3

  services-service:
    build:
      context: ./services-service
      dockerfile: Dockerfile
    container_name: services-service-container
    restart: always
    ports:
      - ${SERVICES_SERVICE_PORT}:8083
    environment:
      - SERVER_PORT=8083
      - SPRING_DATA_MONGODB_DATABASE=${SPRING_DATA_MONGODB_DATABASE}
      - SPRING_DATA_MONGODB_USERNAME=${SPRING_DATA_MONGODB_USERNAME}
      - SPRING_DATA_MONGODB_PASSWORD=${SPRING_DATA_MONGODB_PASSWORD}
      - SPRING_DATA_MONGODB_AUTO_INDEX_CREATION=${SPRING_DATA_MONGODB_AUTO_INDEX_CREATION}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=${SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE}
      - SPRING_DATA_MONGODB_HOST=mongodb
      - SPRING_DATA_MONGODB_PORT=27017
    depends_on:
      mongodb:
        condition: service_healthy
      booking-service:
        condition: service_started
    networks:
      - microservices-network

  mongodb:
    image: mongo
    container_name: services_mongo_db
    ports:
      - ${SPRING_DATA_MONGODB_PORT}:27017
    restart: always
    volumes:
      - mongo:/var/lib/mongo/data
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      - MONGO_DB_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_DB_PASSWORD=${MONGO_DB_PASSWORD}
    networks:
      - microservices-network
    healthcheck:
      test: echo 'db.runCommand({find:"app_db_name.devUser"}).ok' | mongosh --authenticationDatabase ${SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE}
        --host localhost -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} ${SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE} --quiet | grep -q 1
      interval: 10s
      timeout: 3s
      retries: 3
  #    command: ["--bind_ip", "0.0.0.0"]

#  mongo-express:
#    image: mongo-express
#    container_name: services_mongo_express
#    depends_on:
#      - mongodb
#    ports:
#      - ${ME_CONFIG_PORT}:8081
#    environment:
#      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}

networks:
  microservices-network:
    driver: bridge

volumes:
  mongo:
  postgres: